First leasqr fit --

   4.455997788610680e+00
   8.328691628608269e+03
   4.847158351308242e+00
   7.771377304504761e+03
   3.709825363583869e+00
   8.433487624943706e+03
   6.244658363993985e+00
   6.283021316020680e+02
   1.102754605986799e-01
  -3.646079386098360e-02
   2.145058434223280e-02
   1.335656509234432e-02
   3.560859581375150e-03
   1.958634393368734e-03
   1.086205291865503e-03
   1.175928256617317e-03
  -1.257273637115780e-03
   1.000380076262813e-03
   1.464793526814459e-03
   7.703681576201727e-04
  -5.588666424990259e-04
  -5.232045666909679e-04
  -1.222689701084414e-04
   3.033097613243718e-04
  -2.370732821179978e-04
   2.127146107442617e-04
   2.684560508311210e-04
   4.139294800726955e-05
   4.628108555546856e-05
  -2.279332422768877e-05

Max error: 2.019510961119075e-03

Added dpargs -

newargs =

   4.455933499408847e+00
   8.328691514294498e+03
   4.847300488947653e+00
   7.771377008869714e+03
   3.711737946407573e+00
   8.433464956626975e+03
   6.245093316999577e+00
   6.283018804334599e+02
   1.098279860132729e-01
  -3.647613424967600e-02
   2.181546880445081e-02
   1.343397488662405e-02
   3.666017010494447e-03
   1.958338341622697e-03
   1.106037975703158e-03
   1.066491887036795e-03
  -1.240210322645928e-03
   9.823918488054005e-04
   1.167996485223888e-03
   8.199705518467404e-04
  -6.064029930758292e-04
  -5.297625023699753e-04
  -1.003883604000794e-04
   2.736197879132444e-04
  -6.513638383861017e-05
   2.068152682103939e-04
   1.888662939696447e-04
   2.468330020733399e-06
  -4.492258358921168e-06
   8.241738690534472e-07

ans = 1.945164895143736e-03


Probably as good as it will get -

cvg = 1
iter = 4
newargs =

   4.455933499408847e+00
   8.328691514294498e+03
   4.847300488947653e+00
   7.771377008869714e+03
   3.711737946407573e+00
   8.433464956626975e+03
   6.245093316999577e+00
   6.283018804334599e+02
   1.098279860132729e-01
  -3.647613424967600e-02
   2.181546880445081e-02
   1.343397488662405e-02
   3.666017010494447e-03
   1.958338341622697e-03
   1.106037975703158e-03
   1.066491887036795e-03
  -1.240210322645928e-03
   9.823918488054005e-04
   1.167996485223888e-03
   8.199705518467404e-04
  -6.064029930758292e-04
  -5.297625023699753e-04
  -1.003883604000794e-04
   2.736197879132444e-04
  -6.513638383861017e-05
   2.068152682103939e-04
   1.888662939696447e-04
   2.468330020733399e-06
  -4.492258358921168e-06
   8.241738690534472e-07

ans = 1.945164895143736e-03


Next terms -

1,335,850 -- 2D - l' + l aka 2D - M + mp
  445,220 -- aka D
  369,365
1,411,685

Adding 2D - l' + l I get

cvg = 1
iter = 3
newargs =

   4.455933782841101e+00
   8.328691514061244e+03
   4.847300487373351e+00
   7.771377008869877e+03
   3.711741521908981e+00
   8.433464952779264e+03
   6.245093326179965e+00
   6.283018803234129e+02
   1.098294220753561e-01
  -3.647737653399981e-02
   2.181414668659156e-02
   1.343381074086729e-02
   3.665903202447931e-03
   1.958316814323392e-03
   1.106039239668685e-03
   1.066672928797334e-03
  -1.240209781236740e-03
   9.823080994077339e-04
   1.168396449166620e-03
   8.193661471573286e-04
  -6.220874755451685e-04
  -5.298160075286024e-04
  -1.004011787379871e-04
   2.736281167794966e-04
  -6.578343140043888e-05
   2.068112392982703e-04
   1.890063960887877e-04
   2.455817944373398e-06
  -4.495544435005243e-06
   8.222199361884081e-07
   3.190588939109379e-05

ans = 1.941825206418002e-03

Formula is now

func = @(t,p) (1-cos( ...
    mod(polyval([p(4),p(3)],t),2*pi) ...
  + p(9)*sin(polyval([p(2),p(1)],t)) ... # mp
  + p(10)*sin(polyval([p(8),p(7)],t)) ... # M
  + p(11)*sin(2*polyval([p(4),p(3)],t)-polyval([p(2),p(1)],t)) ... # 2D-mp
  + p(12)*sin(2*polyval([p(4),p(3)],t)) ... # 2D
  + p(13)*sin(2*polyval([p(2),p(1)],t)) ... # 2mp
  + p(14)*sin(polyval([p(4),p(3)],t)) ... # D
  + p(15)*sin(2*(polyval([p(6),p(5)],t)-polyval([p(4),p(3)],t))) ... # 2(F-D)
  + p(16)*sin(2*(polyval([p(4),p(3)],t)-polyval([p(2),p(1)],t))) ... # 2(D-mp)
  + p(17)*sin(2*polyval([p(6),p(5)],t)) ... # 2F
  + p(18)*sin(2*polyval([p(4),p(3)],t)-polyval([p(8),p(7)],t)-polyval([p(2),p(1)],t)) ... # 2D - M - mp
  + p(19)*sin(2*polyval([p(4),p(3)],t)+polyval([p(2),p(1)],t)) ... # 2D + mp
  + p(20)*sin(2*polyval([p(4),p(3)],t)-polyval([p(8),p(7)],t)) ... # 2D - M
  + p(21)*sin(polyval([p(8),p(7)],t)-polyval([p(2),p(1)],t)) ... # M - mp
  + p(22)*sin(polyval([p(8),p(7)],t)+polyval([p(2),p(1)],t)) ... # M + mp
  + p(23)*sin(polyval([p(2),p(1)],t)+2*polyval([p(6),p(5)],t)) ... # mp + 2F
  + p(24)*sin(polyval([p(2),p(1)],t)-2*polyval([p(6),p(5)],t)) ... # mp - 2F
  + p(25)*sin(4*polyval([p(4),p(3)],t)-polyval([p(2),p(1)],t)) ... # 4D - mp
  + p(26)*sin(3*polyval([p(2),p(1)],t)) ... # 3mp
  + p(27)*sin(4*polyval([p(4),p(3)],t)-2*polyval([p(2),p(1)],t)) ... # 4D-2mp
  + p(28)*sin(polyval([p(6),p(5)],t)) ... # F
  + p(29)*sin(polyval([p(2),p(1)],t)+polyval([p(6),p(5)],t)) ... # mp+F
  + p(30)*sin(polyval([p(2),p(1)],t)-polyval([p(6),p(5)],t)) ... # mp-F
  + p(31)*sin(2*polyval([p(4),p(3)],t)-polyval([p(8),p(7)],t)+polyval([p(2),p(1)],t)) ... # 2D - M + mp
  ))/2;



